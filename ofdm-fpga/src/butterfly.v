    // x0 = x0 + x1 * w = (x0re + j * x0im) + ((x1re * wre - x1im * wim) + j(x1im * wre + x1re * wim)))
    // x1 = x0 - x1 * w = (x0re + j * x0im) - ((x1re * wre - x1im * wim) - j(x1im * wre + x1re * wim)))
    // x0re = x0re + x1re * wre - x1im * wim = x0re + A | x1re * wre | - B | x1im * wim | = x0re + A0 | x1re * wre | + B0 | x1im * wim |
    // x0im = x0im + x1im * wre + x1re * wim = x0im + C | x1im * wre | + D | x1re * wim | = x0im + C0 | x1im * wre | + D0 | x1re * wim |
    // x1re = x0re - x1re * wre + x1im * wim = x0re - A | x1re * wre | + B | x1im * wim | = x0re + A1 | x1re * wre | + B1 | x1im * wim |
    // x1im = x0im - x1im * wre - x1re * wim = x0im - C | x1im * wre | - D | x1re * wim | = x0im + C1 | x1im * wre | + D1 | x1re * wim |
    // A~Dは掛け算をしたときの符号(xorで求めることができる)
    // 符号は1のときはマイナス、0のときはプラス
    // A = sign(x1re * wre) = x1re ^ wre
    // B = sign(x1im * wim) = x1im ^ wim
    // C = sign(x1im * wre) = x1im ^ wre
    // D = sign(x1re * wim) = x1re ^ wim
    // A0~D0、A1~D1はA~Dとバタフライ演算のときに出てくる符号をかけ合わせたもの
    // A0 = A
    // B0 = ~B
    // C0 = C
    // D0 = D
    // A1 = ~A
    // B1 = B
    // C1 = ~C
    // D1 = ~D
    // |=======input=======|                                   |=========output========|
    // |x1re| wre|x1im| wim|x1re*wre|x1im*wim|x1im*wre|x1re*wim| x0re| x0im| x1re| x1im|
    // |    |    |    |    |    A   |    B   |    C   |    D   |A0|B0|C0|D0|A1|B1|C1|D1|
    // |-------------------------------------------------------------------------------|
    // |  0 |  0 |  0 |  0 |    0   |    0   |    0   |    0   | 0| 1| 0| 0| 1| 0| 1| 1|
    // |-------------------------------------------------------------------------------|
    // |  0 |  0 |  0 |  1 |    0   |    1   |    0   |    1   | 0| 0| 0| 1| 1| 1| 1| 0|
    // |-------------------------------------------------------------------------------|
    // |  0 |  0 |  1 |  0 |    0   |    1   |    1   |    0   | 0| 0| 1| 0| 1| 1| 0| 1|
    // |-------------------------------------------------------------------------------|
    // |  0 |  0 |  1 |  1 |    0   |    0   |    1   |    1   | 0| 1| 1| 1| 1| 0| 0| 0|
    // |-------------------------------------------------------------------------------|
    // |  0 |  1 |  0 |  0 |    1   |    0   |    1   |    0   | 1| 1| 1| 0| 0| 0| 0| 1|
    // |-------------------------------------------------------------------------------|
    // |  0 |  1 |  0 |  1 |    1   |    1   |    1   |    1   | 1| 0| 1| 1| 0| 1| 0| 0|
    // |-------------------------------------------------------------------------------|
    // |  0 |  1 |  1 |  0 |    1   |    1   |    0   |    0   | 1| 0| 0| 0| 0| 1| 1| 1|
    // |-------------------------------------------------------------------------------|
    // |  0 |  1 |  1 |  1 |    1   |    0   |    0   |    1   | 1| 1| 0| 1| 0| 0| 1| 0|
    // |-------------------------------------------------------------------------------|
    // |  1 |  0 |  0 |  0 |    1   |    0   |    0   |    1   | 1| 1| 0| 1| 0| 0| 1| 0|
    // |-------------------------------------------------------------------------------|
    // |  1 |  0 |  0 |  1 |    1   |    1   |    0   |    0   | 1| 0| 0| 0| 0| 1| 1| 1|
    // |-------------------------------------------------------------------------------|
    // |  1 |  0 |  1 |  0 |    1   |    1   |    1   |    1   | 1| 0| 1| 1| 0| 1| 0| 0|
    // |-------------------------------------------------------------------------------|
    // |  1 |  0 |  1 |  1 |    1   |    0   |    1   |    0   | 1| 1| 1| 0| 0| 0| 0| 1|
    // |-------------------------------------------------------------------------------|
    // |  1 |  1 |  0 |  0 |    0   |    0   |    1   |    1   | 0| 1| 1| 1| 1| 0| 0| 0|
    // |-------------------------------------------------------------------------------|
    // |  1 |  1 |  0 |  1 |    0   |    1   |    1   |    0   | 0| 0| 1| 0| 1| 1| 0| 1|
    // |-------------------------------------------------------------------------------|
    // |  1 |  1 |  1 |  0 |    0   |    1   |    0   |    1   | 0| 0| 0| 1| 1| 1| 1| 0|
    // |-------------------------------------------------------------------------------|
    // |  1 |  1 |  1 |  1 |    0   |    0   |    0   |    0   | 0| 1| 0| 0| 1| 0| 1| 1|
    // |-------------------------------------------------------------------------------|

module butterfly
(
    input [15:0] x0_re,
    input [15:0] x0_im,
    input [15:0] _x1_re,
    input [15:0] _x1_im,
    input [15:0] w_re,
    input w_re_sign,
    input [15:0] w_im,
    input w_im_sign,
    output [15:0] res_x0_re,
    output [15:0] res_x0_im,
    output [15:0] res_x1_re,
    output [15:0] res_x1_im
);

wire A, A0, A1, B, B0, B1, C, C0, C1, D, D0, D1;
wire [15:0] x1_re;
wire [15:0] x1_im;
wire [15:0] x1re_wre;
wire [15:0] x1im_wim;
wire [15:0] x1im_wre;
wire [15:0] x1re_wim;
wire [31:0] _x1re_wre;
wire [31:0] _x1im_wim;
wire [31:0] _x1im_wre;
wire [31:0] _x1re_wim;

assign A = _x1_re[15] ^ w_re_sign;
assign B = _x1_im[15] ^ w_im_sign;
assign C = _x1_im[15] ^ w_re_sign;
assign D = _x1_re[15] ^ w_im_sign;
assign A0 = A;
assign B0 = ~B;
assign C0 = C;
assign D0 = D;
assign A1 = ~A0;
assign B1 = ~B0;
assign C1 = ~C0;
assign D1 = ~D0;

assign x1_re = _x1_re[15] ? ~_x1_re + 16'd1 : _x1_re;
assign x1_im = _x1_im[15] ? ~_x1_im + 16'd1 : _x1_im;

assign _x1re_wre = x1_re * w_re;
assign _x1im_wim = x1_im * w_im;
assign _x1im_wre = x1_im * w_re;
assign _x1re_wim = x1_re * w_im;

assign x1re_wre = _x1re_wre[14] ? _x1re_wre[30:15] + 16'd1 : _x1re_wre[30:15];
assign x1im_wim = _x1im_wim[14] ? _x1im_wim[30:15] + 16'd1 : _x1im_wim[30:15];
assign x1im_wre = _x1im_wre[14] ? _x1im_wre[30:15] + 16'd1 : _x1im_wre[30:15];
assign x1re_wim = _x1re_wim[14] ? _x1re_wim[30:15] + 16'd1 : _x1re_wim[30:15];

function [15:0] calc;
input [15:0] x0;
input [15:0] x1w_0;
input [15:0] x1w_1;
input s0;
input s1;
case ({s0, s1})
    2'd0: calc = x0 + x1w_0 + x1w_1;
    2'd1: calc = x0 + x1w_0 + ~x1w_1 + 16'd1;
    2'd2: calc = x0 + ~x1w_0 + 16'd1 + x1w_1;
    2'd3: calc = x0 + ~x1w_0 + ~x1w_1 + 16'd2;
endcase
endfunction

assign res_x0_re = calc(x0_re, x1re_wre, x1im_wim, A0, B0);
assign res_x0_im = calc(x0_im, x1im_wre, x1re_wim, C0, D0);
assign res_x1_re = calc(x0_re, x1re_wre, x1im_wim, A1, B1);
assign res_x1_im = calc(x0_im, x1im_wre, x1re_wim, C1, D1);
endmodule