テーマ名: FPGAを用いたOFDM復調器の製作

まえがき
高崎研での先行研究で、流星バースト通信にOFDM使うと、ビット誤り率が低くなるからいいよーっていうのはわかっている。
だけど、みんなシミュレーションor後からmatlabで復調で、リアルタイムでの復調はだれもやってなかったのでやってみた。
的な内容を書く。

2 理論

2.1 OFDM(直交周波数分割多重方式)
OFDMとはデータを多数の搬送波に乗せる二次変調方式のこと。
搬送波を多重化しているため、高速伝送が可能なのが特徴。
MSBは時間とともに時定数τで減衰するため、短時間で伝送可能なOFDMはMSBとの相性がいい。
OFDMでは変調に逆フーリエ変換、復調にフーリエ変換を用いる。
フーリエ変換にはFFTが使われる。

こんな感じの図

OFDMの説明
送信データ:周波数領域
↓逆フーリエ変換
時間領域
↓伝送
---------------送信
---------------受信
↓フーリエ変換
周波数領域


2.2 FFT(高速フーリエ変換)
DFTの式: X_k = \sigma_{n=0}^{N-1} f_n e^{-j\frac{2\pi}{N} n k}
離散フーリエ変換の計算量は、愚直に実装すると、2重ループが発生し、O(N^2)となる。
FFTはDFTを添字の偶数と奇数を分解し、分割統治法を用いることで、要素数(N)が2のべき乗のときに、計算量をO(NlogN)とすることができるアルゴリズムである。
w \equiv e^{-j\frac{2\pi}{N}}とし、wは回転因子と呼ぶ。

NOTE: 添字の偶数と奇数に分解するところは数式を書くか迷い中

3. 提案手法

3.1 全体の構成

PCで12バイトを変調(Python)
↓
PCから出力
↓
FPGAでAD変換。取得したデータをFFT。
↓
受信データ(12バイト)をシリアル通信でパソコンに送信。

本実験は上記の手順で行った。
変調信号の出力は、Pythonで作成したwavファイルをPCで再生し、AD変換器で読み取るという構成にした。
今回使用したFPGAにはAD変換器は搭載されていないため、MCP3002を外付けして使用した。
信号は9回連続で送信し、1回休止、9回連続で送信...といった感じで実験した。 <- まだ実験していないので変わるかも。

信号仕様(表にしたほうがいいかも)
帯域幅: 984~5671Hz
サブキャリア間隔: 46.875Hz
サンプリング数(N): 1024
サンプリング周波数: 48kHz
1シンボルあたりの時間: 19.2ms
パイロット信号の振幅を0.5、信号の振幅を0.25とした。

図(信号の図)

3.2 FPGAについて(表にしたほうがいいかも)
FPGAはGowin社かのGW1NR-9を使用。
評価ボードはSipped社から販売されているTang Nano 9kを使用。
ハードウェア記述言語にはVerilog HDLを使用。
シミュレーターにはIcarus Verilogを、実機のIDEにはGowin社から出ているIDEを使用した。
FPGAのクロック周波数は評価ボードに搭載している発振器27MHzを、PLLで逓倍し、48MHzとして使用した。
計算にはQ15というフォーマットの固定小数点数を使用した。
Q15とは符号部1ビット、小数部15ビットのフォーマットのことである。
扱える範囲は-1~1-2^-15であるため、オーバーフロー防止のため、パイロット信号および信号の振幅は範囲内に収まるこの値に設定した。

3.3 AD変換とオペアンプについて
PCからの出力は正負の値を含むものであるが、今回採用したAD変換(MCP3002)は0~電源電圧までの値しか扱えない。
そのため、オペアンプの加算回路を用いて、正負の電圧を正の領域のみに変換した。

3.4 FPGAの動作アルゴリズム
文章で書くのが大変なので、後回し。

4. 実験結果
何サイクルで計算が完了したか
FPGAのリソース
実際のスペクトル

について書く。

5. 考察

6. 参考文献
- 高崎和之他: OFDMを用いた流星バースト通信に関する検討, 2016年
- 福田明: 流星バースト通信, 1997年
- James W. Cooley and John W. Tukey: An algorithm for the machine calculation of complex Fourier series, Math. Comp. 19 (1965), 297-301